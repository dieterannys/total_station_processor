x <- 1:20
x
print(x)
1/Inf
class(x)
class(as.numeric(x))
as.complex(x)
y <- list("x", TRUE)
x
y
attributes(x)
attributes(y)
m <- matrix(nrow = 2, ncol = 3)
attributes(m)
dim(m)
?matrix
?matrix
remove(x)
remove(y)
remove(m)
x <- 1:3
y <- 11:14
rbind(x, y)
x <- factor(c("yes", "no", "yes"))
unclass(x)
attributes(x)
x$levels
levels(x)
class(x)
?unclass
is.na(x)
?read.csv
?sapply
dput(x)
url("http://dieterannys.com", open = "r")
con <- url("http://dieterannys.com", open = "r")
site <- readLines(con)
close(con)
head(site)
?commplete.cases
??commplete.cases
?complete.cases
x <- 1:4
y <- c(2)
x + y
y <- 1:2
x + y
data <- read.csv("hw1_data.csv")
names(data)
data[2,]
data[1:2,]
data[-1,]
data[-2,]
data[-150,]
data[152:153,]
data[[47, "Ozone"]]
sum(is.na(data$Ozone))
data[!is.na(data$Ozone)]$Ozone
data[!is.na(data$Ozone)]
data[is.na(data$Ozone)]
data[is.na(Ozone)]
data[is.na(data$Ozone)]
data$Ozone[is.na(data$Ozone)]
data$Ozone[!is.na(data$Ozone)]
mean(data$Ozone[!is.na(data$Ozone)])
mean(data$Solar.R[data$Temp > 90 & data$Ozone > 31])
data$Solar.R
data$Solar.R[data$Temp > 90]
data$Solar.R[data$Temp > 90 & Ozone > 31]
data$Solar.R[data$Temp > 90 & data$Ozone > 31]
data$Solar.R[data$Temp > 90][data$Ozone > 31]
data$Solar.R[data$Temp > 90 & data$Ozone > 31]
data[data$Temp > 90 & data$Ozone > 31,]
data$Solar.R[data$Temp > 90]
data$Temp > 90
data$Ozone > 31
data$Ozone > 31 & data$Temp > 90
data$Solar.R[data$Temp > 90 & !is.na(data$Ozone) & data$Ozone > 31]
mean(data$Solar.R[data$Temp > 90 & !is.na(data$Ozone) & data$Ozone > 31])
mean(data$Temp[data$Month == 6])
max(data$Ozone[data$Month == 5])
max(data$Ozone[data$Month == 5 & !is.na(data$Ozone)])
swirl()
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
bye()
clear
clearPushBack()
f <- function(x, y) {     x * y }
f
f(2,3)
search()
detach("package:swirl", unload = TRUE)
swirl()
search()
x <- function(a) {     a ^ 2  }
x(2)
environment(x)
ls()
ls(environment(x))
rtvs::debug_source("C:/OneDrive/3_projects/personal_visual_studio/TEST_R/TEST_R/script.R")
ls()y <- 2 f <- function(x) {     y <- 5     g(x) } g <- function(x) {     y }
y <- 2 f <- function(x) {     y <- 5     g(x) } g <- function(x) {     y }
print(f(1))
rtvs::debug_source("C:/OneDrive/3_projects/personal_visual_studio/TEST_R/TEST_R/script.R")
    y <- 5
?optim
set.seed(1)
normals <- rnorm(500)
ggplot2(data = normals) + geom_histogram()
library(ggplot2)
ggplot2(data = normals) + geom_histogram()
ggplot(data = normals) + geom_histogram()
ggplot(normals) + geom_histogram()
ggplot(data = normals) + geom_histogram()
ggplot(data = normals, aes(normals)) + geom_histogram()
normals$data <- rnorm(500)
ggplot(data = normals, aes(data)) + geom_histogram()
ggplot(data = normals, aes(normals$data)) + geom_histogram()
ggplot(data = normals$data) + geom_histogram()
normals <- data.frame(data = rnorm(500))
library(ggplot2)
ggplot(data = normals$data) + geom_histogram()
ggplot(data = normals, aes(x = data)) + geom_histogram()
normals <- data.frame(data = rnorm(100000))
library(ggplot2)
ggplot(data = normals, aes(x = data)) + geom_histogram()
x <- as.Date("2018-02-17")
x
unclass(x)
x <- 1:10
f <- function(a) {     a**2 }
lapply(x,f)
x2 <- lapply(x,f)
x2 <- sapply(x,f)
?runif
x <- data.frame(a = runif(100))
library(ggplot2)
ggplot(x, aes(x = a)) + geom_histogram()
x <- data.frame(a = runif(1000))
library(ggplot2)
ggplot(x, aes(x = a)) + geom_histogram()
x <- data.frame(a = runif(1000000))
library(ggplot2)
ggplot(x, aes(x = a)) + geom_histogram()
y <- lapply(1:4, runif, min = 0, max = 1)
y <- lapply(1:4, runif, min = 0, n = 1)
y <- lapply(1:20, runif, min = 0, n = 1)
y <- sapply(1:20, runif, min = 0, n = 1)
str(apply)
quantile(1:10,probs=0.25)
quantile(1:10,probs=c(0.25,.5,.75))
quantile(0:10,probs=c(0.25,.5,.75))
quantile(x$a,probs=c(0.25,.5,.75))
x <- data.frame(a = runif(10000000))
quantile(x$a,probs=c(0.25,.5,.75))
ggplot(x, aes(x = a)) + geom_histogram()
object.size(x)
object.size(x) / 1024 ** 2
class(object.size(x))
unclass(object.size(x))
unclass(object.size(x)) / 1024 ** 2
round(unclass(object.size(x)) / 1024 ** 2,1)
as.character(round(unclass(object.size(x)) / 1024 ** 2,1))
as.character(round(unclass(object.size(x)) / 1024 ** 2,1)) + " MB"
cat(as.character(round(unclass(object.size(x)) / 1024 ** 2,1))," MB")
cat(as.character(round(unclass(object.size(x)) / 1024 ** 2,1)),"MB")
cat(as.character(round(unclass(object.size(x)) / 1024 ** 2,1)),"MB",sep = "")
cat(as.character(round(unclass(object.size(x)) / 1024 ** 2,1))," MB",sep = "")
rep(3,2)
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4, 4)
c(rnorm(10), runif(10))
c(c(1,2,),c(3,4))
c(c(1,2),c(3,4))
str(gl)
x <- data.frame(a = rnorm(1000000))
ggplot(x, aes(x = a)) + geom_histogram()
x <- data.frame(a = rnorm(1000000, 10, 5))
ggplot(x, aes(x = a)) + geom_histogram()
rm(all)
x <- read.csv("hw1_data.csv")
library(ggplot2)
lapply(x,mean)
lapply(x[complete.cases(x)],mean)
complete.cases(x)
x[complete.cases(x)]
x[complete.cases(x),]
lapply(x[complete.cases(x),],mean)
lapply(split(x[complete.cases(x),],x$Month),mean)
lapply(split(x[complete.cases(x), ], x$Month), mean) 
lapply(split(x[complete.cases(x), ], x$Month), function(x) colMeans(x)) 
sapply(split(x[complete.cases(x), ], x$Month), function(x) colMeans(x)) 
sapply(split(x, x$Month), function(x) colMeans(x, na.rm = TRUE)) 
message("hello")
x
invisible(x)
y <- x
y <- invisible(x)
f <- function(a, b) {     mean(c) }
f(x)
traceback()
str(x)
str(str)
summary(x)
summary x$Temp
summary(x$Temp)
rnorm(100)
pnorm(c(.25,.5,.75))
pnorm(c(0))
pnorm(c(-.25))
pnorm(c(-1.96))
dnorm(-1.96)
dnorm(0)
dnorm(1)
dnorm(2)
dnorm(1.96)
qnorm(0.005)
qnorm(0.025)
rpois(10)
rpois(10,1)
dnorm(0)
dnorm(-1)
dnorm(-2)
dnorm(-1.96)
dnorm(-2.5)
dnorm(0)
pnorm(c(-1.96))
qnorm(0.025)
qnorm(0.025, lower.tail = FALSE)
dnorm(-2:2)
dnorm(seq(-2,2))
dnorm(seq(-2,2,.1))
x <- dnorm(seq(-2,2,.1))
data$x <- dnorm(seq(-2,2,.1))
data <- data.frame(x = dnorm(seq(-2,2,.1)))
ggplot(data = data, aes(x = x)) + geom_line()
seqn <- seq(-2, 2, .1)
data <- data.frame(x = seqn, y = dnorm(seqn))
ggplot(data = data, aes(x = x, y = y)) + geom_line()
seqn <- seq(-10, 10, .1)
data <- data.frame(x = seqn, y = dnorm(seqn))
ggplot(data = data, aes(x = x, y = y)) + geom_line()
seqn <- seq(-3, 3, .1)
data <- data.frame(x = seqn, y = dnorm(seqn))
ggplot(data = data, aes(x = x, y = y)) + geom_line()
length(seqn)
ggplot() + geom_line(data = data, aes(x = x, y = y))
data2 <- data.frame(vals = rnorm(200))
ggplot() + geom_line(data = data, aes(x = x, y = y)) + geom_histogram(data = data2, aes(x = vals) ggplot() + geom_line(data = data, aes(x = x, y = y)) + geom_histogram(data = data2, aes(x = vals))
ggplot() + geom_line(data = data, aes(x = x, y = y)) + geom_histogram(data = data2, aes(x = vals))
pnorm(0)
pnorm(-1.96)
qnorm(0.025)
pnorm(-1.959964)
ggplot() + geom_line(data = data, aes(x = x, y = y, color = "red")) + geom_histogram(data = data2, aes(x = vals))
ggplot() + geom_histogram(data = data2, aes(x = vals)) + geom_line(data = data, aes(x = x, y = y, color = "red"))
ggplot() + geom_histogram(data = data2, aes(x = vals)) + geom_line(data = data, aes(x = x, y = y * 50, color = "red"))
data2 <- data.frame(vals = rnorm(10000))
ggplot() + geom_histogram(data = data2, aes(x = vals)) + geom_line(data = data, aes(x = x, y = y * 50, color = "red"))
ggplot() + geom_histogram(data = data2, aes(x = vals)) + geom_line(data = data, aes(x = x, y = y * 2000, color = "red"))
ggplot() + geom_histogram(data = data2, aes(x = vals)) + geom_line(data = data, aes(x = x, y = y * 2200, color = "red"))
ggplot() + geom_histogram(data = data2, aes(x = vals)) + geom_line(data = data, aes(x = x, y = y * 2600, color = "red"))
rbinom(10,0,0.5)
rbinom(10,1,0.5)
rbinom(10,2,0.5)
rbinom(10,10,0.5)
p <- ggplot() for (i in 1:4) {     p <- p + geom_line(data = data.frame(x = seq(-3,3,.1), y = dnorm(seq(-3,3,.1),0,i)), aes(x = x, y = y)) } p
p <- ggplot() seqn <- seq(-10,10,.1) for (i in 1:4) {     p <- p + geom_line(data = data.frame(x = seqn, y = dnorm(seqn,0,i)), aes(x = x, y = y)) } p
system.time(rnorm(100000))
system.time(rnorm(10000000))
system.time(rnorm(100000000))
1
+ 2
1 + 2
x <- rnorm(1000)
hist(x)
rug(x)
hist(x, breaks=100)
rug(x)
hist(x, breaks=5)
hist(x, breaks=20)
rug(x)
abline(v = 0)
abline(v = 0, lwd = 2)
abline(v = 0, lwd = 3)
abline(v = 0, lwd = 3, col = "red")
abline(v = c(0,1), lwd = 3, col = "red")
abline(v = quantile(x, c(.25,.5,.75)), lwd = 3, col = "red")
x <- rnorm(1000)
hist(x, breaks=20)
rug(x)
abline(v = quantile(x, c(.25,.5,.75)), lwd = 3, col = "red")
abline(v = quantile(x, c(0,.25,.5,.75,1)), lwd = 3, col = "red")
x <- rnorm(1000) hist(x, breaks=20) rug(x) abline(v = quantile(x, c(0, .25, .5, .75, 1)), lwd = 3, col = "red")
library(datasets)
hist(airquality$Ozone)
rug(airquality$Ozone)
with(airquality, hist(Ozone))
with(airquality, hist(Ozone), rug(Ozone))
    hist(Ozone)
    rug(Ozone)
with(airquality, {     hist(Ozone)     rug(Ozone) })
colors()
par("bg")
par(bg = "red")
with(airquality, {     hist(Ozone)     rug(Ozone) })
par(bg = "white")
with(airquality, {     hist(Ozone)     rug(Ozone) })
environment(airquality)
ls(environment(airquality))
environment(airquality)
str(airquality)
environment(airquality$Ozone)
with(airquality, {     plot(Ozone, Wind) })
with(airquality, {     plot(Ozone, Wind, pch = 20) })
    abline(lm(Ozone ~ Wind, airquality), lwd = 2, col = "red")
with(airquality, {     plot(Ozone, Wind, pch = 20)     abline(lm(Ozone ~ Wind, airquality), lwd = 2, col = "red") })
    abline(lm(Wind ~ Ozone, airquality), lwd = 2, col = "red")
with(airquality, {     plot(Ozone, Wind, pch = 20)     abline(lm(Wind ~ Ozone, airquality), lwd = 2, col = "red") })
example(points)
example(points)
library(ggplot2)
library(datasets)
x <- rnorm(100)
ggplot() + geom_histogram(aes(x = x))
environment(x)
library(lattice)
for (s in airquality) {     print(s[1:5]) }
plots <- list()
length(airquality)
library(ggplot2)
library(datasets)
qplot(data = mpg, x = displ, y = hwy)
qplot(data = mpg, x = displ, y = hwy, color = drv)
qplot(data = mpg, x = displ, y = hwy, color = drv, geom = c("point", "smooth"))
qplot(data = mpg, x = displ, y = hwy, color = drv)
x <- 1:10
log(x)
10**.7
2**.7
log(x,10)
exp(1)
pi()
pi
x <- rnorm(20,10,2)
qplot(x)
qplot(x, bins = 10)
x <- rnorm(200, 10, 2)
qplot(x, bins = 10)
qplot(x, bins = 10, geom = "histogram")
qplot(x, bins = 10, geom = "density")
qplot(x, geom = "density")
amount <- 200
x <- rnorm(amount, 10, 2)
library(ggplot2)
library(lattice)
library(datasets)
ggplot(airquality, aes(Wind, Ozone)) + geom_point()
ggplot(airquality, aes(Wind, Ozone)) + geom_point() + geom_smooth()
ggplot(airquality, aes(Wind, Ozone)) + geom_point() + geom_smooth(method = "lm")
ggplot(airquality, aes(Wind, Ozone)) + geom_point() + geom_smooth(method = "lm") + theme_bw()
dev.cur()
dev.list()
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point() + geom_smooth(method = "lm") + theme_bw()
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point() + geom_smooth(method = "lm") + theme_bw()
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4) + geom_smooth(method = "lm") + theme_bw()
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1/3) + geom_smooth(method = "lm") + theme_bw()
seq(1,10,length=4)
seq(0,10,length=4)
seq(0,1,length=5)
quantile(airquality$Temp, seq(0,1,length=5))
cutpoints <- quantile(airquality$Temp, seq(0,1,length=5))
cutpoints <- quantile(airquality$Temp, seq(0, 1, length = 5), na.rm = TRUE)
factors <- cut(airquality$Temp, cutpoints)
?expression
x <- rnorm(10)
expression("log " + x)
y <- expression("log " + x)
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1/3) + geom_smooth(method = "lm") + theme_bw()
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + title(main = "TEST")
gplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + title(main = "TEST")
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + title(main = "TEST")
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + labs(title = "TEST")
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + labs(title = expression("sin" + x))
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + labs(title = expression("sin(" + x + ")"))
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + labs(title = expression("sin(x)"))
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + labs(title = expression("log_10(x)"))
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + labs(title = expression(pi))
ggplot(airquality, aes(Wind, Ozone, color = Temp)) + geom_point(size = 4, alpha = 1 / 3) + geom_smooth(method = "lm") + theme_bw() + labs(title = expression(pi + x/y))
x <- rnorm(10)
y <- runif(10)
data <- data.frame(x = rnorm(10), y = rnorm(10))
dist(data)
xyplot(data)
xyplot(x = x, y = y, data = data)
library(ggplot2)
library(lattice)
xyplot(x = x, y = y, data = data)
ggplot(data = data, aes(x = x, y = y)) + geom_point()
data <- data.frame(x = rnorm(20), y = rnorm(20))
dist(data)
distxy <- dist(data)
ggplot(data = data, aes(x = x, y = y)) + geom_point()
ggplot(data = data, aes(x = x, y = y), size = 4) + geom_point()
ggplot(data = data, aes(x = x, y = y), size = 6) + geom_point()
ggplot(data = data, aes(x = x, y = y)) + geom_point(size = 6)
hclustering <- hclust(distxy)
plot(hclustering)
heatmap(data)
data <- matrix(rnorm(10), nrow = 5, ncol = 2)
heatmap(data)
data <- matrix(rnorm(25), nrow = 5, ncol = 5)
heatmap(data)
data <- matrix(rnorm(81), nrow = 9, ncol = 9)
heatmap(data)
data[8,7]
data(2,1)
data[2, 1]
data <- matrix(rbinom(81,1,.5), nrow = 9, ncol = 9)
heatmap(data)
data[8, 7]
data[2, 1]
x <- rnorm(12, mean = rep(1:3, each = 4), sd = .2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = .2)
plot(x,y, col="blue", pch=19, cex = 2)
text(x+.05,y+.05,labels=as.character(1:12))
environment(ggplot)
dataFrame <- data.frame(x = x, y = y)
kmeansObj <- kmeans(dataFrame, centers = 3)
dataFrame$cluster <- kmeansObj$cluster
ggplot(dataFrame, aes(x, y, color = cluster)) + geom_point()
dataFrame$cluster <- factor(kmeansObj$cluster)
ggplot(dataFrame, aes(x, y, color = cluster)) + geom_point()
ggplot(dataFrame, aes(x, y, color = cluster)) + geom_point(size = 4)
ggplot(dataFrame, aes(x, y, color = cluster)) + geom_point(size = 4) + geom_rug(aes(x))
ggplot(dataFrame, aes(x, y, color = cluster)) + geom_point(size = 4) + geom_rug()
kmeansObj$centers
geom_point(data = kmeansObj, aes(centers[,1], centers[,2]))
ggplot(dataFrame, aes(x, y, color = cluster)) + geom_point(size = 4) + geom_rug() + geom_point(aes(kmeansObj$centers[,1], kmeansObj$centers[,2]))
centers <- with(kmeansObj, data.frame(centers[,1], centers[,2]))
centers <- with(kmeansObj, data.frame(x = centers[,1], y = centers[,2]))
ggplot(dataFrame, aes(x, y, color = cluster)) + geom_point(size = 4) + geom_rug() + geom_point(data = centers, aes(x, y))
ggplot(data = dataFrame, aes(x, y, color = cluster)) + geom_point(size = 4) + geom_rug() + geom_point(data = centers, aes(x, y))
ggplot() + geom_point(data = dataFrame, aes(x, y, color = cluster), size = 4) + geom_point(data = centers, aes(x, y))
ggplot() + geom_point(data = dataFrame, aes(x, y, color = cluster), size = 4) + geom_point(data = centers, aes(x, y), size = 4, pch=4)
install.packages("rbitcoin")
install.packages("Rbitcoin")
library(Rbitcoin)
market.api.query.bitmarket()
market.api.process("bitstamp", c("BTC","EUR"),"ticker")
market.api.process("kraken", c("BTC","EUR"),"ticker")
ticker <- market.api.process("kraken", c("BTC","EUR"),"ticker")
ticker$bid
str(ticker)
trades <- market.api.process("kraken", c("BTC", "EUR"), "trades")
min(trades$trades$date)
ggplot(data=trades$trades, aes(x = date, y = price)) + geom_line()
library(ggplot2)
ggplot(data=trades$trades, aes(x = date, y = price)) + geom_line()
ggplot(data=trades$trades, aes(x = date, y = price, color = type)) + geom_line()
ggplot(data=trades$trades, aes(x = date, y = price, color = type)) + geom_point()
    geom_line()
ggplot(data = trades$trades, aes(x = date, y = price)) +     geom_point(aes(color = type)) +     geom_line()
trades <- market.api.process("kraken", c("BTC", "EUR"), "trades")
ggplot(data = trades$trades, aes(x = date, y = price)) +     geom_point(aes(color = type)) +     geom_line()
trades <- market.api.process("kraken", c("BTC", "EUR"), "trades")
min(trades$trades$date)
ggplot(data = trades$trades, aes(x = date, y = price)) +     geom_point(aes(color = type)) +     geom_line()
ggplot(data = trades$trades, aes(x = date, y = price)) +     geom_point(aes(color = type)) +     geom_line()
trades <- market.api.process("kraken", c("BTC", "EUR"), "trades")
ticker$bid
str(ticker)
min(trades$trades$date)
ggplot(data = trades$trades, aes(x = date, y = price)) +     geom_point(aes(color = type)) +     geom_line()
trades <- market.api.process("kraken", c("BTC", "EUR"), "trades")
ggplot(data = trades$trades, aes(x = date, y = price)) +     geom_point(aes(color = type)) +     geom_line()
install.packages("manipulate")
library(manipulate)
    ?randu
    ?runif
    runif(1)
f <- function(x) x + runif(1)
f(1)
f <- function(x) x + runif(1, min = -.5, max = .5)
f(1)
f(1)
f(1)
f(1)
f(1)
x <- runif(200,0,10)
y <- f(x)
library(ggplot2)
ggplot(mapping = aes(x = x, y = y)) + geom_point()
f
x <- runif(200, 0, 10)
e <- rnorm(200)
y <- 0.5 * x + e
ggplot(mapping = aes(x = x, y = y)) + geom_point()
e <- rnorm(200,0,.5)
y <- 0.5 * x + e
ggplot(mapping = aes(x = x, y = y)) + geom_point()
lm(y ~ x)
ggplot(mapping = aes(x = x, y = y), size = 2, alpha = .5) + geom_point()
ggplot(mapping = aes(x = x, y = y)) + geom_point(size = 2, alpha = .5)
x <- runif(200, 0, 10)
e <- rnorm(200,0,1)
y <- 0.5 * x + e
ggplot(mapping = aes(x = x, y = y)) + geom_point(size = 2, alpha = .5)
lm(y ~ x)
cor(x, y)
x <- runif(200, 0, 10)
e <- rnorm(200,0,.5)
y <- 0.5 * x + e
ggplot(mapping = aes(x = x, y = y)) + geom_point(size = 2, alpha = .5)
lm(y ~ x)
cor(x, y)
x <- runif(200, 0, 10)
e <- rnorm(200,0,1)
y <- 0.5 * x + e
ggplot(mapping = aes(x = x, y = y)) + geom_point(size = 2, alpha = .5)
lm(y ~ x)
cor(x, y)
rm(f, envir = as.environment(".GlobalEnv"))
n <- 200
x <- runif(n, 0, 10)
e <- rnorm(n, 0, 1)
y <- 0.5 * x + e
ggplot(mapping = aes(x = x, y = y)) + geom_point(size = 2, alpha = .5)
lm(y ~ x)
cor(x, y)
draw <- function(b1) {     ggplot(mapping = aes(x = x, y = y)) +         geom_point(size = 2, alpha = .5) +         geom_abline(slope = b1, intercept = 0) }
draw(1)
draw <- function(b1) {     ggplot(mapping = aes(x = x, y = y)) +         geom_point(size = 2, alpha = .5) +         geom_abline(slope = b1, intercept = 0) +         title("Slope", b1) }
draw(1)
draw <- function(b1) {     ggplot(mapping = aes(x = x, y = y)) +         geom_point(size = 2, alpha = .5) +         geom_abline(slope = b1, intercept = 0) +         ggtitle("Slope", b1) }
draw(1)
draw <- function(b1) {     ggplot(mapping = aes(x = x, y = y)) +         geom_point(size = 2, alpha = .5) +         geom_abline(slope = b1, intercept = 0) +         ggtitle(b1) }
draw(1)
draw <- function(b1) {     ggplot(mapping = aes(x = x, y = y)) +         geom_point(size = 2, alpha = .5) +         geom_abline(slope = b1, intercept = 0) +         ggtitle(b1 + " " + b1) }
draw(1)
manipulate(draw(b1), slider(0,1,0.5,step = 0.1))
lm(y ~x)
model <- lm(y ~x)
draw <- function(b0, b1) {     ggplot(mapping = aes(x = x, y = y)) +         geom_point(size = 2, alpha = .5) +         geom_abline(slope = b1, intercept = 0) }
draw(model$coefficients)
draw <- function(b0, b1) {     ggplot(mapping = aes(x = x, y = y)) +         geom_point(size = 2, alpha = .5) +         geom_abline(slope = b1, intercept = b0) }
model <- lm(y ~x)
draw(model$coefficients)
draw(model$coefficients)
draw(model$coefficients[1], model$coefficients[2])
typeof(model$coefficients)
do.call(draw, model$coefficients)
n <- 200
x <- rnorm(n, 5, 3)
e <- rnorm(n, 0, 1)
y <- 0.5 * x + e
draw(model$coefficients[1], model$coefficients[2])
model <- lm(y ~x)
draw <- function(b0, b1) {     ggplot(mapping = aes(x = x, y = y)) +         geom_point(size = 2, alpha = .5) +         geom_abline(slope = b1, intercept = b0) +         geom_abline(slope = 0.5, intercept = 0, color = "red") }
draw(model$coefficients[1], model$coefficients[2])
n <- 20
x <- rnorm(n, 5, 3)
e <- rnorm(n, 0, 1)
y <- 0.5 * x + e
draw(model$coefficients[1], model$coefficients[2])
model <- lm(y ~x)
draw(model$coefficients[1], model$coefficients[2])
n <- 2000
x <- rnorm(n, 5, 3)
e <- rnorm(n, 0, 1)
y <- 0.5 * x + e
model <- lm(y ~x)
draw(model$coefficients[1], model$coefficients[2])
n <- 2000 r = 1 x <- rnorm(n) e <- rnorm(n) y <- r * x + (1-r)*e ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1) +     geom_smooth()
n <- 2000 r = 0.5 x <- rnorm(n) e <- rnorm(n) y <- r * x + (1-r)*e ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1) +     geon_abline(slope = cor(x, y)) +     geom_smooth(method = "lm") model <- lm(y ~x) draw(model$coefficients[1], model$coefficients[2])
n <- 2000 r = 0 x <- rnorm(n) e <- rnorm(n) y <- r * x + (1-r)*e ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1) +     geon_abline(slope = cor(x, y)) +     geom_smooth(method = "lm")
n <- 2000 r = 0 x <- rnorm(n) e <- rnorm(n) y <- r * x + (1-r)*e ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1) +     geom_abline(slope = cor(x, y)) +     geom_smooth(method = "lm")
n <- 2000 r = 1 x <- rnorm(n) e <- rnorm(n) y <- r * x + (1-r)*e ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1) +     geom_abline(slope = cor(x, y)) +     geom_smooth(method = "lm")
n <- 2000 r = 0.5 x <- rnorm(n) e <- rnorm(n) y <- r * x + (1-r)*e ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1) +     geom_abline(slope = cor(x, y)) +     geom_smooth(method = "lm")
cor(x, y)
ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1) +     geom_abline(slope = cor(x, y)) +     geom_smooth(method = "lm")
ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1, color = "red") +     geom_abline(slope = cor(x, y)) +     geom_smooth(method = "lm")
ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1, color = "red") +     geom_abline(slope = cor(x, y), size = 2) +     geom_smooth(method = "lm")
n <- 2000 r = 0 x <- rnorm(n) e <- rnorm(n) y <- r * x + (1-r)*e ggplot(mapping = aes(x = x, y = y)) +     geom_point(size = 2, alpha = .5) +     geom_abline(slope = 1, color = "red") +     geom_abline(slope = cor(x, y), size = 2) +     geom_smooth(method = "lm") cor(x, y)
? I
?optim
pts <- read.csv("bestfit_testvalues.csv")
pts <- read.csv("bestfit_testvalues.csv") ax1 <- 'x' ax2 <- 'z' init1 <- mean(pts[[ax1]]) init2 <- mean(pts[[ax2]]) print(init1) print(init2)
pts <- read.csv("bestfit_testvalues.csv") ax1 <- 'x' ax2 <- 'z' x <- pts[[ax1]] y <- pts[[ax2]] init1 <- mean(x) init2 <- mean(y) print(init1) print(init2) f <- function(cx, cy) {     d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)     d } f(init1, init2)
pts <- read.csv("bestfit_testvalues.csv") ax1 <- 'x' ax2 <- 'z' x <- pts[[ax1]] y <- pts[[ax2]] init1 <- mean(x) init2 <- mean(y) print(init1) print(init2) f <- function(cx, cy) {     d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)     r <- mean(d)     ls <- sum((r-d)**2)     ls } f(init1, init2)
optim(c(init1, init2), f)
optim(c(init1, init2), f)
pts <- read.csv("bestfit_testvalues.csv") ax1 <- 'x' ax2 <- 'z' x <- pts[[ax1]] y <- pts[[ax2]] init1 <- mean(x) init2 <- mean(y) print(init1) print(init2) f <- function(c) {     cx <- c[1]     cy <- c[2]     d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)     r <- mean(d)     ls <- sum((r-d)**2)     ls } optim(c(init1, init2), f)
optim(c(init1, init2), f)$par
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     xy } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     z <- mean(pts[[ax3]])     xy     z } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     c(x, y, z) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     list(x, y, z, names=c(ax1, ax2, ax3)) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     list(x, y, z, colnames=c(ax1, ax2, ax3)) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     list(x=x, y, z, colnames=c(ax1, ax2, ax3)) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     str(list(x=x, y, z, colnames=c(ax1, ax2, ax3))) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     names(list(x=x, y, z)) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c("x", "y", "z")     sol } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c(ax1, ax2, ax3)     sol } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
}
best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c(ax1, ax2, ax3)     t(sol) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3, printr=F) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         if (printr) print(r)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c(ax1, ax2, ax3)     printr=T     f(c(x,y))     t(sol) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3, printr=F) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         if (printr) print(r)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c(ax1, ax2, ax3)     printr=T     f(xy)     t(sol) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3, printr=F) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         if (printr) print(d)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c(ax1, ax2, ax3)     printr=T     f(xy)     t(sol) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3, printr=F) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         if (printr) cat(r)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c(ax1, ax2, ax3)     printr=T     f(xy)     t(sol) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3, printr=F) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         if (printr) print("TEST")         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c(ax1, ax2, ax3)     printr=T     f(xy)     t(sol) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3, printr=F) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         if (printr) print(r)         ls <- sum((r - d) ** 2)         ls     }     xy <- optim(c(init1, init2), f)$par     x <- xy[1]     y <- xy[2]     z <- mean(pts[[ax3]])     sol <- list(x, y, z)     names(sol) <- c(ax1, ax2, ax3)     printr=T     f(xy)     t(sol) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     cz <- mean(pts[[ax3]])     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     sol <- list(cx, cy, cz, r)     names(sol) <- c(ax1, ax2, ax3, "r")     t(sol) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     cz <- mean(pts[[ax3]])     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     sol <- list(cx, cy, cz, r)     names(sol) <- c(ax1, ax2, ax3, "r")     t(round(sol,5)) } best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
best_fit_circle <- function(fn, ax1, ax2, ax3) {     pts <- read.csv(fn)     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     cz <- mean(pts[[ax3]])     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     sol <- list(cx, cy, cz, r)     names(sol) <- c(ax1, ax2, ax3, "r")     t(sol) } sol <- best_fit_circle("bestfit_testvalues.csv", "x", "z", "y")
unlist(sol)
round(unlist(sol),10)
lm(data = pts, z ~ x + y)
library(ggplot2)
ggplot(pts, aes(x = x, y = z)) + geom_point()
ggplot(pts, aes(x = y, y = z)) + geom_point()
coefs <- lm(data = pts, z ~ x + y)$coef
ggplot() +     geom_point(data = pts, aes(x = x, y =  ggplot() +     geom_point(data = pts, aes(x = x, y = y)) ggplot() +     geom_point(data = pts, aes(x = x, y = y)) ggplot(data = pts, aes(x = x, y = y)) +     geom_point()
ggplot(data = pts, aes(x = z, y = y)) +     geom_point() + ggplot(data = pts, aes(x = z, y = y)) +     geom_point()
ggplot(data = pts, aes(x = z, y = y)) +     geom_point()
rlx <- c(min(x), max(x)) rlz <- a* c(min(x), max(x))
coefs <- lm(data = pts, z ~ x + y)$coef a <- coefs[2] b <- coefs[3] c <- coefs[1] rlx <- c(min(x), max(x)) rlz <- a* c(min(x), max(x))
ggplot(data = pts, aes(x = z, y = x)) +     geom_point() +     geom_line(data = NULL, mapping = aes(rlx, rlz))
ggplot(data = pts, aes(x = z, y = x)) +     geom_point() +     geom_line(data = NULL, mapping = aes(x = rlx, y = rlz))
ggplot(data = pts, aes(x = z, y = x)) +     geom_point() +     geom_line(data = data.frame(rlx = rlx, rlz = rlz), mapping = aes(x = rlx, y = rlz))
princomp(pts)
pca <- princomp(pts)
sds <- princomp(pts)$sdev
sds[1]
sds[1]/sds[3]
princomp(pts)$loadings
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[,c("x","y","z")]
pts <- read.csv("bestfit_testvalues.csv") xyz <- pts[,c("x","y","z")] best_fit_circle <- function(pts, ax1, ax2, ax3) {     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     cz <- mean(pts[[ax3]])     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     sol <- list(cx, cy, cz, r)     names(sol) <- c(ax1, ax2, ax3, "r")     t(sol) } best_fit_circle(xyz,                  "x", "z", "y")
xyz$x <- xyz$x - mean(xyz$x)
xyz$x <- xyz$x - mean(xyz$x) xyz$y <- xyz$y - mean(xyz$y) xyz$z <- xyz$z - mean(xyz$z)
plotxy <- ggplot(data = xyz, aes(x=x, y = y)) + geom_point()
plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point() plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point() plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()
library(gridExtra)
grid.arrange(plotxy, plotxz, plotyz, ncol=2)
plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point() + coord_fixed() plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point() + coord_fixed() plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point() + coord_fixed() grid.arrange(plotxy, plotxz, plotyz, ncol=2)
plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point() plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point() plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point() grid.arrange(plotxy, plotxz, plotyz, ncol=2)
plot_data_3D <- function(xyz) {     xyz$x <- xyz$x - mean(xyz$x)     xyz$y <- xyz$y - mean(xyz$y)     xyz$z <- xyz$z - mean(xyz$z)     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) }
plot_data_3D(xyz)
library(ggplot2) library(lattice) library(gridExtra) # Functions plot_data_3D <- function(xyz) {     xyz$x <- xyz$x - mean(xyz$x)     xyz$y <- xyz$y - mean(xyz$y)     xyz$z <- xyz$z - mean(xyz$z)     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } # Code plot_data_3D(xyz) pts <- read.csv("bestfit_testvalues.csv") xyz <- pts[,c("x","y","z")] best_fit_circle <- function(pts, ax1, ax2, ax3) {     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     cz <- mean(pts[[ax3]])     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     sol <- list(cx, cy, cz, r)     names(sol) <- c(ax1, ax2, ax3, "r")     t(sol) } best_fit_circle(xyz,                  "x", "z", "y")
pts <- read.csv("bestfit_testvalues.csv") xyz <- pts[, c("x", "y", "z")] plot_data_3D(xyz) best_fit_circle <- function(pts, ax1, ax2, ax3) {     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     cz <- mean(pts[[ax3]])     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     sol <- list(cx, cy, cz, r)     names(sol) <- c(ax1, ax2, ax3, "r")     t(sol) } best_fit_circle(xyz,                  "x", "z", "y")
svd(xyz)
xyz - mean(xyz)
mean(xyz)
colMeans(xyz)
xyz - colMeans(xyz)
princomp(xyz)
pca <- princomp(xyz)
pca$loadings
pca <- prcomp(xyz)
pca$rotation
?prcomp
pca$rotation[2,1] / pca$rotation[1,1]
pca$rotation[2, 2] / pca$rotation[1, 2]
lm(z ~ x, xyz)
lm(z ~ y, xyz)
pca$rotation[1, 1] / pca$rotation[2, 1]
pca$rotation[1, 2] / pca$rotation[2, 2]
asin(pca$rotation[1,1])
tan(asin(pca$rotation[1,1]))
tan(asin(pca$rotation[2,1]))
tan(asin(pca$rotation[3,1]))
tan(asin(pca$rotation[1,2]))
tan(asin(pca$rotation[1,3]))
tan(asin(pca$rotation[2,2]))
tan(asin(pca$rotation[3,2]))
tan(asin(pca$rotation[1,3]))
tan(asin(pca$rotation[2,3]))
tan(asin(pca$rotation[3,3]))
best_fit_circle(xyz,                  "x", "z", "y")
-v[-ncol(v),ncol(v)]
v <- pca$rotation
-v[-ncol(v),ncol(v)]
n[ncol(v),ncol(v)]
v[ncol(v),ncol(v)]
- v[-ncol(v), ncol(v)] / v[ncol(v),ncol(v)]
beta <- - v[-ncol(v), ncol(v)] / v[ncol(v),ncol(v)]
xyz$z - xyz$x * beta$x - xyz$y * beta$y
beta <- as.vector(-v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)])
beta <- as.list(-v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)])
xyz$z - xyz$x * beta - xyz$y * beta$y
beta <- as.data.frame(-v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)])
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
xyz$z - xyz$x * beta[["x"]] - xyz$y * beta$y
xyz$z - xyz$x * beta[["x"]] - xyz$y * beta[["y"]]
residuals <- xyz$z - xyz$x * beta[["x"]] - xyz$y * beta[["y"]]
barplot(residuals)
barplot(residuals - mean(residuals))
mean(residuals)
barplot(residuals - mean(residuals))
mean(xyz)
colMeans(xyz)
atan(beta[["x"]])
atan(beta[["y"]])
Rx = matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, -sin(ax), cos(ax)), nrow = 3, ncol = 3)
ay = atan(beta[["x"]])
ax = atan(beta[["y"]])
Rx = matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, -sin(ax), cos(ax)), nrow = 3, ncol = 3)
Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, -sin(ax), cos(ax)), nrow = 3, ncol = 3)
Rx
Ry <- matrix(c(cos(ay), 0, -sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)
Ry
as.matrix(xyz)
Rx %*% as.matrix(xyz)
t(as.matrix(xyz))
Rx %*% t(as.matrix(xyz))
apply(xyz, 1, function(x) Rx %*% t(as.matrix(x)))
apply(xyz, 1, function(x) Rx %*% as.matrix(x))
xyzr <- apply(xyz, 1, function(x) Rx %*% as.matrix(x))
xyzr <- apply(xyzr, 1, function(x) Ry %*% as.matrix(x))
xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- data.frame(xyzr, rownames = c("x", "y", "z"))
xyzr <- data.frame(xyzr, row.names = c("x", "y", "z"))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
lm(z ~x + y, xyz)
lm(z ~x + y, xyz)$coef
beta
plot_data_3D(xyz)
ax <- 0
ay <- 45 / 180 * pi
Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)
Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)
xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
ax <- 45 / 180 * pi
ay <- 0
Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)
Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)
xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
ay <- atan(beta[["x"]])
ax <- atan(beta[["y"]])
Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)
Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)
xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
xyzr <- t(apply(xyz, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
pca <- with(xyz, prcomp(z ~x + y))
pca <- with(xyz, prcomp(~ x + y))
v <- pca$rotation
pca <- with(xyz, prcomp(~ x + y + z))
v <- pca$rotation
pca <- prcomp(xyz)
v <- pca$rotation
pca <- with(xyz, prcomp(~ z + y + x))
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]])
ax <- atan(beta[["y"]])
xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
pca <- prcomp(xyz)
v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- with(xyz, prcomp(~ z + y + x)) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- with(xyz, prcomp(~ z + y + x)) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- prcomp(xyz)
v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- with(xyz, prcomp(~ z + x + y)) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
plot_data_3D(xyz)
pca <- with(xyz, prcomp(~ x + z + y))
v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- with(xyz, prcomp(~ x + y + z)) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- with(xyz, prcomp(~ x + y + z)) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- - atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- with(xyz, prcomp(~ x + y + z)) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) ay <- 0 Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- with(xyz, prcomp(~ x + y + z)) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) ax <- 0 ay <- 0 Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- prcomp(xyz) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- t(apply(xyz, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
pca <- prcomp(xyz) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) xyzr <- xyz xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
Rz <- matrix(c(cos(az), sin(az), 0, -sin(az), cos(az), 0, 0, 0, 1),nrow = 3, ncol = 3)
az <- 0
Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)
Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)
Rz <- matrix(c(cos(az), sin(az), 0, -sin(az), cos(az), 0, 0, 0, 1),nrow = 3, ncol = 3)
xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))
plot_data_3D(xyz)
pca <- prcomp(xyz) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) az <- 0
ay <- 0
Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)
Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)
Rz <- matrix(c(cos(az), sin(az), 0, -sin(az), cos(az), 0, 0, 0, 1),nrow = 3, ncol = 3)
xyzr <- xyz
xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
ay <- atan(beta[["y"]])
ax <- atan(beta[["x"]])
az <- 0
Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)
Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)
Rz <- matrix(c(cos(az), sin(az), 0, -sin(az), cos(az), 0, 0, 0, 1),nrow = 3, ncol = 3)
xyzr <- xyz
xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
ay <- atan(beta[["x"]])
ax <- atan(beta[["y"]])
Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)
Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)
Rz <- matrix(c(cos(az), sin(az), 0, -sin(az), cos(az), 0, 0, 0, 1),nrow = 3, ncol = 3)
xyzr <- xyz
xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))
xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))
xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])
plot_data_3D(xyzr)
plot_data_3D <- function(xyz) {     xyz$x <- xyz$x - mean(xyz$x)     xyz$y <- xyz$y - mean(xyz$y)     xyz$z <- xyz$z - mean(xyz$z)     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point() + coord_fixed()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point() + coord_fixed()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point() + coord_fixed()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) }
pca <- prcomp(xyz) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]]) az <- 0 ay <- 0 Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3) Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3) Rz <- matrix(c(cos(az), sin(az), 0, -sin(az), cos(az), 0, 0, 0, 1),nrow = 3, ncol = 3) xyzr <- xyz xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x))) xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x))) xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3]) plot_data_3D(xyzr)
lm(z ~ x + y, xyzr)$coef
plot_data_3D <- function(xyz) {     xyz$x <- xyz$x - mean(xyz$x)     xyz$y <- xyz$y - mean(xyz$y)     xyz$z <- xyz$z - mean(xyz$z)     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point() + coord_fixed()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point() + coord_fixed()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point() + coord_fixed()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) }
rotate_points <- function(xyz, ax, ay, az) {     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))     xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr }
rotate_points(xyz, ax, ay, 0)
xyzr <- rotate_points(xyz, ax, ay, 0)
plot_data_3D(xyzr)
plot_data_3D <- function(xyz) {     xyz$x <- xyz$x - mean(xyz$x)     xyz$y <- xyz$y - mean(xyz$y)     xyz$z <- xyz$z - mean(xyz$z)     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) }
plot_data_3D(xyzr)
for (a in seq(0, 360, 36)) {     print(a) }
for (a in seq(0, 360, 360/8)) {     print(a) }
a <- seq(0, 360, 45)
a
a <- seq(0, 360 - 45, 45)
a
z <- rep(0, n)
n <- 8
z <- rep(0, n)
circle <- cbind(x, y, z)
n <- 8
r <- 4
a <- seq(0, 360 - 360 / n, 360 / n)
x <- r * cos(a)
y <- r * sin(a)
z <- rep(0, n)
circle <- cbind(x, y, z)
circle
plot_data_3D(circle)
circle <- data.frame(x = x, y = y, z = z)
plot_data_3D(circle)
plot_data_3D(gen_circle(8, 4))
gen_circle <- function(n, r) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle }
plot_data_3D(gen_circle(8, 4))
gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle }
plot_data_3D(gen_circle(8, 4, 30, 45, 0))
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
pca <- prcomp(xyz) v <- pca$rotation beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)] ay <- atan(beta[["x"]]) ax <- atan(beta[["y"]])
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
rotate_points <- function(xyz, ax, ay, az) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))     xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr }
gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle }
xyz <- gen_circle(8, 4, 30, 45, 0)
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]])
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
pca <- with(xyz, prcomp(~x+y+z))
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
pca <- with(xyz, prcomp(~y+x+z))
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
pca <- with(xyz, prcomp(~y+z+y))
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
ax <- atan(1 / beta[["y"]]) * 180 / pi
pca <- with(xyz, prcomp(~x+z+y))
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(1 / beta[["y"]]) * 180 / pi
pca <- with(xyz, prcomp(~x+z+y))
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(1 / beta[["y"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
pca <- with(xyz, prcomp(~x+y+z))
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
ax <- atan(1/beta[["y"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
beta <- -v[, ncol(v)] / v[ncol(v), ncol(v)]
-ncol(v)
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
beta[["y"]] <- beta[["y"]] / sin(ay * pi / 180)
ax <- atan(beta[["y"]]) * 180 / pi
ax <- atan(1/beta[["y"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
beta[["y"]] <- beta[["y"]] / sin(ay * pi / 180)
xyz <- gen_circle(8, 4, 30, 0, 0)
plot_data_3D(xyz)
pca <- with(xyz, prcomp(~x+y+z))
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
xyz <- gen_circle(8, 4, 30, 45, 0)
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
ax <- atan(beta[["y"]]) * 180 / pi
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
xyz <- rotate_points(xyz, 0, ay, 0)
plot_data_3D(xyz)
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ax <- atan(beta[["y"]]) * 180 / pi
xyz <- rotate_points(xyz, ax, 0, 0)
plot_data_3D(xyz)
plot_data_3D(xyz)
plot_data_3D(xyz)
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
xyz <- rotate_points(xyz, 0, ay, 0)
plot_data_3D(xyz)
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ax <- - atan(beta[["y"]]) * 180 / pi
xyz <- rotate_points(xyz, ax, 0, 0)
plot_data_3D(xyz)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ay <- atan(beta[["x"]]) * 180 / pi
xyz <- rotate_points(xyz, 0, ay, 0)
plot_data_3D(xyz)
pca <- prcomp(xyz)
v <- pca$rotation
beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]
ax <- - atan(beta[["y"]]) * 180 / pi
xyz <- rotate_points(xyz, ax, 0, 0)
plot_data_3D(xyz)
angles_to_xy <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(ax = ax, ay = ay) }
angles_to_xy(xyz)
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
angles_to_xy(xyz)
xyz <- gen_circle(8, 4, 30, 45, 0)
a <- angles_to_xy(xyz)
xyzr <- rotate_points(xyz, a$ax, a$ay, 0)
plot_data_3D(xyzr)
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
a <- angles_to_xy(xyz)
xyzr <- rotate_points(xyz, a$ax, a$ay, 0)
plot_data_3D(xyzr)
rotate_points <- function(xyz, ax, ay, az) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))     xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     xyz$x <- xyz$x - mean(xyz$x)     xyz$y <- xyz$y - mean(xyz$y)     xyz$z <- xyz$z - mean(xyz$z)     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } angles_to_xy <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(ax = ax, ay = ay) } best_fit_circle <- function(pts) {     ax1 <- "x"     ax2 <- "y"     ax3 <- "z"     x <- pts[[ax1]]     y <- pts[[ax2]]     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     cz <- mean(pts[[ax3]])     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     sol <- list(cx, cy, cz, r)     names(sol) <- c(ax1, ax2, ax3, "r")     t(sol) } # Code
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
a <- angles_to_xy(xyz)
xyzr <- rotate_points(xyz, a$ax, a$ay, 0)
plot_data_3D(xyzr)
xyzr <- rotate_points(xyz, 0, a$ay, 0)
xyzr <- rotate_points(xyzr, a$ax, 0, 0)
plot_data_3D(xyzr)
best_fit_circle(xyzr)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
a <- angles_to_xy(xyz)
xyzr <- rotate_points(xyz, 0, a$ay, 0)
xyzr <- rotate_points(xyzr, a$ax, 0, 0)
a <- angles_to_xy(xyz)
xyzr <- rotate_points(xyz, 0, a$ay, 0)
xyzr <- rotate_points(xyzr, a$ax, 0, 0)
plot_data_3D(xyzr)
best_fit_circle(xyzr)
cxyz <- best_fit_circle(xyzr)
cxyz <- best_fit_circle(xyzr) ucs <- dataframe(x = c(cxyz[1], cxyz[1] + 2, cxyz[1]),                  y = c(cxyz[2], cxyz[2], cxyz[2] + 1),                  z = c(cxyz[3], cxyz[3], cxyz[3]))
ucs <- data.frame(x = c(cxyz[1], cxyz[1] + 2, cxyz[1]),                  y = c(cxyz[2], cxyz[2], cxyz[2] + 1),                  z = c(cxyz[3], cxyz[3], cxyz[3]))
ucs <- data.frame(x = c(cxyz[1], I(cxyz[1] + 2), cxyz[1]),                  y = c(cxyz[2], cxyz[2], I(cxyz[2] + 1)),                  z = c(cxyz[3], cxyz[3], cxyz[3]))
cxyz[1]
cxyz[[1]]
cxyz <- as.vector(best_fit_circle(xyzr))
ucs <- data.frame(x = c(cxyz[1], cxyz[1] + 2, cxyz[1]),                  y = c(cxyz[2], cxyz[2], cxyz[2] + 1),                  z = c(cxyz[3], cxyz[3], cxyz[3]))
ucs <- data.frame(x = c(cxyz[[1]], cxyz[1] + 2, cxyz[1]))
ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]))
ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]),                  y = c(cxyz[[2]], cxyz[[2]], cxyz[[2]] + 1),                  z = c(cxyz[[3]], cxyz[[3]], cxyz[[3]]))
ucs <- rotate_points(ucs, -a$ay, -a$ay, 0)
a <- angles_to_xy(xyz) xyzr <- rotate_points(rotate_points(xyz, 0, a$ay, 0), a$ax, 0, 0) cxyz <- as.vector(best_fit_circle(xyzr)) ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]),                  y = c(cxyz[[2]], cxyz[[2]], cxyz[[2]] + 1),                  z = c(cxyz[[3]], cxyz[[3]], cxyz[[3]])) ucs <- rotate_points(ucs, -a$ay, -a$ay, 0)
ucs
a <- angles_to_xy(xyz) xyzr <- rotate_points(rotate_points(xyz, 0, a$ay, 0), a$ax, 0, 0) plot_data_3D(xyzr)
xyzr <- xyz
plot_data_3D(xyzr)
rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr }
rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr }
xyzr <- rotate_points(xyz, a$ax, a$ay, 0, T)
plot_data_3D(xyzr)
cxyz <- as.vector(best_fit_circle(xyzr))
ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]),                  y = c(cxyz[[2]], cxyz[[2]], cxyz[[2]] + 1),                  z = c(cxyz[[3]], cxyz[[3]], cxyz[[3]]))
data(xyz)
as.array(xyz)
plot_data_3D(xyz)
ggplot(data = xyz, aes(x=x, y = z)) + geom_point()
ggplot(data = xyz, aes(x = x, y = z)) + geom_point() +     geom_line(data = ucs, mapping = aes(x=x, y = z))
ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]),                  y = c(cxyz[[2]], cxyz[[2]], cxyz[[2]] + 1),                  z = c(cxyz[[3]], cxyz[[3]], cxyz[[3]]))
ucs <- rotate_points(ucs, -a$ay, -a$ay, 0, T)
ggplot(data = xyz, aes(x = x, y = z)) + geom_point() +     geom_line(data = ucs, mapping = aes(x=x, y = z))
ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]),                  y = c(cxyz[[2]], cxyz[[2]], cxyz[[2]] + 1),                  z = c(cxyz[[3]], cxyz[[3]], cxyz[[3]]))
ucs <- rotate_points(ucs, -a$ay, -a$ay, 0, F)
ggplot(data = xyz, aes(x = x, y = z)) + geom_point() +     geom_line(data = ucs, mapping = aes(x=x, y = z))
plot_data_3D(xyz) a <- angles_to_xy(xyz) xyzr <- rotate_points(xyz, a$ax, a$ay, 0, T) cxyz <- as.vector(best_fit_circle(xyzr)) ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]),                  y = c(cxyz[[2]], cxyz[[2]], cxyz[[2]] + 1),                  z = c(cxyz[[3]], cxyz[[3]], cxyz[[3]])) ucs <- rotate_points(ucs, -a$ay, -a$ay, 0, F) ggplot(data = xyz, aes(x = x, y = z)) + geom_point() +     geom_line(data = ucs, mapping = aes(x=x, y = z))
ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]),                  y = c(cxyz[[2]], cxyz[[2]], cxyz[[2]] + 1),                  z = c(cxyz[[3]], cxyz[[3]], cxyz[[3]]))
ggplot(data = xyzr, aes(x = x, y = z)) + geom_point() +     geom_line(data = ucs, mapping = aes(x=x, y = z))
ggplot(data = xyzr, aes(x = x, y = y)) + geom_point() +     geom_line(data = ucs, mapping = aes(x=x, y = y))
ucs <- data.frame(x = c(cxyz[[1]], cxyz[[1]] + 2, cxyz[[1]]),                  y = c(cxyz[[2]], cxyz[[2]], cxyz[[2]] + 1),                  z = c(cxyz[[3]], cxyz[[3]], cxyz[[3]]))
ucs <- rotate_points(ucs, -a$ax, -a$ay, 0, F)
ggplot(data = xyz, aes(x = x, y = y)) + geom_point() +     geom_line(data = ucs, mapping = aes(x=x, y = y))
    geom_line(data = ucs, mapping = aes(x=x, y = z))
ggplot(data = xyz, aes(x = x, y = z)) + geom_point() +     geom_line(data = ucs, mapping = aes(x=x, y = z))
cxyz[4]
ucs
cxyz[4]
xyz <- gen_circle(8, 4, 30, 45, 0)
}
gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle }
rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr }
xyz <- gen_circle(8, 4, 30, 45, 0)
best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     xyz <- rotate_points(xyz, 0, ay, 0)     str(pca)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(ax = ax, ay = ay) }
best_fit_ucs(xyz)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
best_fit_ucs(xyz)
best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = ax, ay = ay, az = 0) }
best_fit_ucs(xyz)
ucs <- best_fit_ucs(xyz)
ucs$tx
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) }
plot_data_3D(xyz)
xyz <- gen_circle(8, 4, 30, 45, 0)
ucs <- best_fit_ucs(xyz)
best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- -atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = ax, ay = ay, az = 0) }
ucs <- best_fit_ucs(xyz)
best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) }
ucs <- best_fit_ucs(xyz)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     fun(xyz, ...) }
with_ucs(ucs, xyz, plot_data_3D)
plot_data_3D(xyz)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     fun(xyz, ...) }
with_ucs(ucs, xyz, plot_data_3D)
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
best_fit_circle <- function(xyz) {     x <- xyz$x     y <- xyz$y     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     list(x = cx, y = cy, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     if (res = NULL) print("null") else print("data") }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     if (res = NULL) print("null") else print("data") }
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     if (res == NULL) print("null") else print("data") }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     type(res) }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     typeof(res) }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     res }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     c("x") %in% names(res) }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     c("x", "y") %in% names(res) }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     typeof(c("x", "y", "z") %in% names(res)) }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     if (c("x", "y", "z") %in% names(res) == c(T, T, T)) {         print("TRUE")     } else {         print("FALSE")     } }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         print("TRUE")     } else {         print("FALSE")     } }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         print("TRUE")     } else {         print("FALSE")     }     sum(c("x", "y", "z") %in% names(res)) }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, plot_data_3D)
best_fit_circle <- function(xyz) {     x <- xyz$x     y <- xyz$y     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res = fun(xyz, ...)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         print("TRUE")     } else {         print("FALSE")     }     sum(c("x", "y", "z") %in% names(res)) }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, best_fit_circle)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az, T)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, best_fit_circle)
library(ggplot2) library(lattice) library(gridExtra) # Functions rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     x <- xyz$x     y <- xyz$y     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) } with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az, T)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res } # Import data
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x     y <- xyz$y     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     print(init1)     print(init2)     cxy <- optim(c(init1, init2), f)$par     print(cxy)     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
xyz <- gen_circle(8, 4, 30, 45, 0)
# Calculate useful info
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs(ucs, xyz, best_fit_circle)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x     y <- xyz$y     init1 <- mean(x)     init2 <- mean(y)     print(x)     print(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     print(init1)     print(init2)     cxy <- optim(c(init1, init2), f)$par     print(cxy)     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x     y <- xyz$y     init1 <- mean(x)     init2 <- mean(y)     print(x)     print(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     print(init1)     print(init2)     cxy <- optim(c(init1, init2), f, lower = c(-Inf, -Inf), upper = c(Inf, Inf))$par     print(cxy)     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x     y <- xyz$y     init1 <- mean(x)     init2 <- mean(y)     print(x)     print(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     print(init1)     print(init2)     cxy <- optim(c(init1, init2), f)$par     print(cxy)     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
xyz <- gen_circle(8, 4, 30, 45, 0)
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
with_ucs(ucs, xyz, plot_data_3D)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     print(x)     print(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     print(init1)     print(init2)     cxy <- optim(c(init1, init2, init2), f)$par     print(cxy)     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
xyz <- gen_circle(8, 4, 30, 45, 0)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     print(x)     print(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     print(init1)     print(init2)     cxy <- optim(c(init1, init2), f)$par     print(cxy)     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     print(x)     print(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         print(cx)         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     print(cxy)     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c, x, y) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f, x, y)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c, x, y) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f, x = x, y = y)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
xyz <- gen_circle(8, 4, 30, 45, 0)
ucs <- best_fit_ucs(xyz)
xyzr <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$z, T)
xyzr <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)
plot_data_3D(xyzr)
best_fit_circle(xyzr)
best_fit_circle <- function(xyz) {     print(xyz)     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
best_fit_circle(xyzr)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
ucs <- best_fit_ucs(xyz)
xyzr <- rotate_points(xyz, - ucs$ax, - ucs$ay, - ucs$az, T)
plot_data_3D(xyzr)
best_fit_circle(xyzr)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         print(x)         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
best_fit_circle(xyzr)
xyz$x
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
best_fit_circle(xyzr)
plot_data_3D(xyzr)
best_fit_circle(xyzr)
x <- xyzr$x
y <- xyzr$y
x
y
init1 <- mean(x)
init2 <- mean(y)
f <- function(c) {     cx <- c[1]     cy <- c[2]     d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)     r <- mean(d)     ls <- sum((r - d) ** 2)     ls }
cxy <- optim(c(init1, init2), f)$par
cx <- cxy[1]
cy <- cxy[2]
r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))
data.frame(x = cx, y = cy, z = 0, r = r)
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(pts) {     x <- pts$x + 1000     y <- pts$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         cx <- c[1]         cy <- c[2]         d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
f <- function(c, x, y) {     d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)     r <- mean(d)     ls <- sum((r - d) ** 2)     ls } best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     cxy <- optim(c(init1, init2), f, x = x, y = y)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
x <- xyzr$x
y <- xyzr$y
init1 <- mean(x)
init2 <- mean(y)
f <- function(c) {     cx <- c[1]     cy <- c[2]     d <- sqrt((x - cx) ** 2 + (y - cy) ** 2)     r <- mean(d)     ls <- sum((r - d) ** 2)     ls }
cxy <- optim(c(init1, init2), f)$par
cx <- cxy[1]
cy <- cxy[2]
r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))
data.frame(x = cx, y = cy, z = 0, r = r)
best_fit_circle <- function(xyz) {     x <- xyz$x + 1000     y <- xyz$y + 1000     init1 <- mean(x)     init2 <- mean(y)     f <- function(c) {         d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(init1, init2), f)$par     cx <- cxy[1] - 1000     cy <- cxy[2] - 1000     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
xyzr <- rotate_points(xyz, - ucs$ax, - ucs$ay, - ucs$az, T)
plot_data_3D(xyzr)
best_fit_circle(xyzr)
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     f <- function(c) {         d <- sqrt((xyz$x - c[1]) ** 2 + (xyz$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(xyz$x), mean(xyz$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
f <- function(c) {     d <- sqrt((xyzr$x - c[1]) ** 2 + (xyzr$y - c[2]) ** 2)     r <- mean(d)     ls <- sum((r - d) ** 2)     ls } cxy <- optim(c(mean(xyzr$x), mean(xyzr$y)), f)$par cx <- cxy[1] cy <- cxy[2] r <- mean(sqrt((xyzr$x - cx) ** 2 + (xyzr$y - cy) ** 2)) data.frame(x = cx, y = cy, z = 0, r = r)
best <- function(xyzr) {     f <- function(c) {         d <- sqrt((xyzr$x - c[1]) ** 2 + (xyzr$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(xyzr$x), mean(xyzr$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyzr$x - cx) ** 2 + (xyzr$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
best(xyzr)
# Libraries library(ggplot2) library(lattice) library(gridExtra) # Functions rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     f <- function(c) {         d <- sqrt((xyz$x - c[1]) ** 2 + (xyz$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(xyz$x), mean(xyz$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) } with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
best <- function(xyzr) {     f <- function(c) {         d <- sqrt((xyzr$x - c[1]) ** 2 + (xyzr$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(xyzr$x), mean(xyzr$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyzr$x - cx) ** 2 + (xyzr$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
best(xyzr)
xyzr <- rotate_points(xyz, - ucs$ax, - ucs$ay, - ucs$az, T)
best(xyzr)
best_fit_circle <- function(pts) {     f <- function(c) {         d <- sqrt((pts$x - c[1]) ** 2 + (pts$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(pts$x), mean(pts$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((pts$x - cx) ** 2 + (pts$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyzrrr) {     f <- function(c) {         d <- sqrt((xyzrrr$x - c[1]) ** 2 + (xyzrrr$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(xyzrrr$x), mean(xyzrrr$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyzrrr$x - cx) ** 2 + (xyzrrr$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     f <- function(c) {         d <- sqrt((xyz$x - c[1]) ** 2 + (xyz$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(xyz$x), mean(xyz$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle(xyzr)
best_fit_circle(xyzr)
with_ucs(ucs, xyz, best_fit_circle)
ls_r <- function(c) {     d <- sqrt((xyz$x - c[1]) ** 2 + (xyz$y - c[2]) ** 2)     r <- mean(d)     ls <- sum((r - d) ** 2)     ls } rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     cxy <- optim(c(mean(xyz$x), mean(xyz$y)), ls_r)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) }
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
ls_r <- function(c) {     d <- sqrt((xyz$x - c[1]) ** 2 + (xyz$y - c[2]) ** 2)     r <- mean(d)     ls <- sum((r - d) ** 2)     ls } rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     cxy <- optim(c(mean(xyz$x), mean(xyz$y)), ls_r)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) } with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
xyzr <- rotate_points(xyz, - ucs$ax, - ucs$ay, - ucs$az, T)
plot_data_3D(xyzr)
best_fit_circle(xyzr)
rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     f <- function(c) {         d <- sqrt((xyz$x - c[1]) ** 2 + (xyz$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(xyz$x), mean(xyz$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) } with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res } # Import data pts <- read.csv("bestfit_testvalues.csv") xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
xyzr <- rotate_points(xyz, - ucs$ax, - ucs$ay, - ucs$az, T)
best_fit_circle(xyzr)
rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     f <- function(c) {         d <- sqrt((xyz$x - c[1]) ** 2 + (xyz$y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(xyz$x), mean(xyz$y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx, y = cy, z = 0, r = r) } with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res } # Import data pts <- read.csv("bestfit_testvalues.csv") xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     #xyz$x <- xyz$x - ucs$tx     #xyz$y <- xyz$y - ucs$ty     #xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         #resxyz$x <- resxyz$x + ucs$tx         #resxyz$y <- resxyz$y + ucs$ty         #resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 100     y <- xyz$y + 100     f <- function(c) {         d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(x), mean(y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx - 100, y = cy - 100, z = 0, r = r) }
best_fit_circle <- function(xyz) {     x <- xyz$x + 100     y <- xyz$y + 100     f <- function(c) {         d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(x), mean(y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((xyz$x - cx) ** 2 + (xyz$y - cy) ** 2))     data.frame(x = cx - 100, y = cy - 100, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
best_fit_circle <- function(xyz) {     x <- xyz$x + 100     y <- xyz$y + 100     f <- function(c) {         d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(x), mean(y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx - 100, y = cy - 100, z = 0, r = r) }
with_ucs(ucs, xyz, best_fit_circle)
with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
with_ucs(ucs, xyz, best_fit_circle)
library(ggplot2) library(gridExtra) # Functions rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     x <- xyz$x + 100     y <- xyz$y + 100     f <- function(c) {         d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(x), mean(y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx - 100, y = cy - 100, z = 0, r = r) } with_ucs <- function(ucs, xyz, fun, ...) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     print(res)     if (sum(c("x", "y", "z") %in% names(res)) == 3) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
plot_data_3D(xyz)
get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0,0,0),                       y = c(1,0,0),                       z = c(0, 1, 0))     xyz <- rotate_points(xyz, ucs$ax, ucs$ay, ucs$az)     xyz$x <- xyz$x + ucs$tx     xyz$y <- xyz$y + ucs$ty     xyz$z <- xyz$z + ucs$tz     xyz }
xyz <- gen_circle(8, 4, 30, 45, 0)
ucs <- best_fit_ucs(xyz)
get_ucs_xy(ucs)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
ucs <- best_fit_ucs(xyz)
get_ucs_xy(ucs)
get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0,1,0),                       y = c(0,0,1),                       z = c(0, 0, 0))     xyz <- rotate_points(xyz, ucs$ax, ucs$ay, ucs$az)     xyz$x <- xyz$x + ucs$tx     xyz$y <- xyz$y + ucs$ty     xyz$z <- xyz$z + ucs$tz     xyz }
get_ucs_xy(ucs)
ucs_xy <- get_ucs_xy(ucs)
get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0,1,0),                       y = c(0,0,1),                       z = c(0, 0, 0))     xyz <- rotate_points(xyz, ucs$ax, ucs$ay, ucs$az)     xyz$x[1] <- xyz$x[1] + ucs$tx     xyz$y[1] <- xyz$y[1] + ucs$ty     xyz$z[1] <- xyz$z[1] + ucs$tz     xyz }
ucs_xy <- get_ucs_xy(ucs)
ucs_xy
round(ucs_xy,5)
get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0,1,0),                       y = c(0,0,1),                       z = c(0, 0, 0))     xyz <- rotate_points(xyz, ucs$ax, ucs$ay, ucs$az, T)     xyz$x[1] <- xyz$x[1] + ucs$tx     xyz$y[1] <- xyz$y[1] + ucs$ty     xyz$z[1] <- xyz$z[1] + ucs$tz     xyz }
ucs_xy <- get_ucs_xy(ucs)
round(ucs_xy,5)
get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0,1,0),                       y = c(0,0,1),                       z = c(0, 0, 0))     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     xyz$x[1] <- xyz$x[1] + ucs$tx     xyz$y[1] <- xyz$y[1] + ucs$ty     xyz$z[1] <- xyz$z[1] + ucs$tz     xyz }
ucs_xy <- get_ucs_xy(ucs)
ucs_xy <- get_ucs_xy(ucs)
round(ucs_xy,5)
get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0,1,-1),                       y = c(0,0,1),                       z = c(0, 0, 0))     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     xyz$x[1] <- xyz$x[1] + ucs$tx     xyz$y[1] <- xyz$y[1] + ucs$ty     xyz$z[1] <- xyz$z[1] + ucs$tz     xyz }
ucs_xy <- get_ucs_xy(ucs)
round(ucs_xy,5)
get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0,1,-1),                       y = c(0,0,1),                       z = c(0, 0, 0))     xyz <- rotate_points(xyz, ucs$ax, ucs$ay, ucs$az)     xyz$x[1] <- xyz$x[1] + ucs$tx     xyz$y[1] <- xyz$y[1] + ucs$ty     xyz$z[1] <- xyz$z[1] + ucs$tz     xyz }
ucs_xy <- get_ucs_xy(ucs)
round(ucs_xy,5)
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
pts <- read.csv("bestfit_testvalues.csv")
xyz <- pts[, c("x", "y", "z")]
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
with_ucs(ucs, xyz, best_fit_circle)
ucs_xy <- get_ucs_xy(ucs)
round(ucs_xy,5)
with_ucs <- function(ucs, xyz, fun = NULL, ..., convert_back = T) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     if (sum(c("x", "y", "z") %in% names(res)) == 3 & convert_back) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res }
with_ucs(ucs, xyz, best_fit_circle)
with_ucs(ucs, xyz, best_fit_circle, convert_back = F)
plot_data_3D(xyz)
scr_data <- ""
scr_data <- scr_data + "UCS\n3\n"
scr_data <- paste(scr_data, paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","))
print(scr_data)
scr_data <- ""
scr_data <- paste(scr_data,"UCS\n3\n")
scr_data <- paste(scr_data, paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","))
print(scr_data)
write(scr_data, "out.scr")
scr_data <- ""
scr_data <- paste(scr_data,"UCS\n3\n", sep = "")
scr_data <- paste(scr_data, paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), sep = "")
print(scr_data)
write(scr_data, "out.scr")
scr_data <- ""
scr_data <- paste(scr_data,"UCS\n3\n", sep = "")
scr_data <- paste(scr_data, paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n", sep = "")
scr_data <- paste(scr_data, paste("@",ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n", sep = "")
print(scr_data)
write(scr_data, "out.scr")
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1]),sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2]), sep = ","), "\n")
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n")
print(scr_data)
write(scr_data, "out.scr")
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   sep = "") print(scr_data) write(scr_data, "out.scr")
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","),                   sep = "")
write(scr_data, "out.scr")
circle_in_ucs <- with_ucs(ucs, xyz, best_fit_circle, convert_back = F)
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x),                   sep = "")
write(scr_data, "out.scr")
ucs_xy <- round(get_ucs_xy(ucs), 5)
circle_in_ucs <- with_ucs(ucs, xyz, best_fit_circle, convert_back = F)
scr_data <- ""
scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x),                   sep = "")
print(scr_data)
write(scr_data, "out.scr")
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r,"\n",                   sep = "")
write(scr_data, "out.scr")
circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F),5)
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r,"\n",                   sep = "") print(scr_data) write(scr_data, "out.scr")
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r,"\n",                   sep = "") print(scr_data) write(scr_data, "out.scr")
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r, "\n",                   "UCS\n",                   sep = "")
write(scr_data, "out.scr")
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(-circle_in_ucs$x, -circle_in_ucs$y, -circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r, "\n",                   "UCS\n",                   sep = "") write(scr_data, "out.scr")
ucs <- best_fit_ucs(xyz) with_ucs(ucs, xyz, plot_data_3D) ucs_xy <- round(get_ucs_xy(ucs), 5) circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F),5) scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r, "\n",                   "UCS\n",                   sep = "") write(scr_data, "out.scr")
xyz_filt <- function(pts, id_starts_with) {     (pts[startsWith(as.string(pts[1]),id_starts_with)]) }
pts <- read.table("170524_TP01_Total_Station.txt", header = T, sep = " ")
pts <- read.csv("170524_TP01_Total_Station.txt", sep = " ")
pts <- read.csv("170524_TP01_Total_Station.txt", sep = "")
names(pts) <- c("id", "x", "y", "z")
xyz_filt(pts, "50")
pts$id
as.character(pts$id)
xyz_filt <- function(pts, id_starts_with) {     (pts[startsWith(as.character(pts$id),id_starts_with)]) }
xyz_filt(pts, "50")
xyz_filt <- function(pts, id_starts_with) {     (pts[startsWith(as.character(pts$id),id_starts_with),]) }
xyz_filt(pts, "50")
xyz_filt(pts, "")
xyz_filt <- function(pts, id_starts_with) {     (pts[startsWith(as.character(pts$id),id_starts_with),c("x","y","z")]) }
xyz_filt(pts, "")
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D(xyz_filt(pts, "50"))
ucs <- best_fit_ucs(xyz_filt(pts, "50"))
with_ucs(ucs, xyz_filt(pts, "50"), plot_data_3D)
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D(xyz_filt(pts, "50"))
ucs <- best_fit_ucs(xyz_filt(pts, "50"))
with_ucs(ucs, xyz_filt(pts, "50"), plot_data_3D)
ucs_xy <- round(get_ucs_xy(ucs), 5)
circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F),5)
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r, "\n",                   "UCS\n",                   sep = "")
write(scr_data, "out.scr")
xyz <- xyz_filt(pts, "50")
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
ucs_xy <- round(get_ucs_xy(ucs), 5)
circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F),5)
xyz <- xyz_filt(pts, "50")
plot_data_3D(xyz)
ucs <- best_fit_ucs(xyz)
with_ucs(ucs, xyz, plot_data_3D)
ucs_xy <- round(get_ucs_xy(ucs), 5)
circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F),5)
scr_data <- "" scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1],sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r, "\n",                   "UCS\n",                   sep = "") write(scr_data, "out.scr")
plot_data_3D(xyz_filt(pts, "")) scr_data <- "" for (crc in c("50","51")) {     xyz <- xyz_filt(pts, crc)     plot_data_3D(xyz)     ucs <- best_fit_ucs(xyz)     with_ucs(ucs, xyz, plot_data_3D)     ucs_xy <- round(get_ucs_xy(ucs), 5)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r, "\n",                   "UCS\n",                   sep = "") } write(scr_data, "out.scr")
plot_data_3D(xyz_filt(pts, "")) scr_data <- "" for (crc in c("50","51")) {     xyz <- xyz_filt(pts, crc)     #plot_data_3D(xyz)     ucs <- best_fit_ucs(xyz)     #with_ucs(ucs, xyz, plot_data_3D)     ucs_xy <- round(get_ucs_xy(ucs), 5)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r, "\n",                   "UCS\n\n",                   sep = "") } write(scr_data, "out.scr")
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     #plot_data_3D(xyz)     ucs <- best_fit_ucs(xyz)     #with_ucs(ucs, xyz, plot_data_3D)     ucs_xy <- round(get_ucs_xy(ucs), 5)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data,                   "UCS\n3\n",                   paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",                   "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",                   "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",                   "CIRCLE\n",                   paste(circle_in_ucs$x, circle_in_ucs$y, circle_in_ucs$z, sep = ","), "\n",                   circle_in_ucs$r, "\n",                   "UCS\n\n",                   sep = "") } write(scr_data, "out.scr")
scr_data <- ""
scr_com_ucs <- function(ucs = NULL) {     ucs_xy <- round(get_ucs_xy(ucs), 5)     if (ucs != NULL) {         return(paste("UCS\n3\n",               sep = ""))     } else {         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } }
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     #plot_data_3D(xyz)     ucs <- best_fit_ucs(xyz)     #with_ucs(ucs, xyz, plot_data_3D)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs))     scr_data <- paste(scr_data, scr_com_ucs()) } write(scr_data, "out.scr")
scr_com_ucs <- function(ucs = NULL) {     ucs_xy <- round(get_ucs_xy(ucs), 5)     if (ucs) {         return(paste("UCS\n3\n",               sep = ""))     } else {         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } }
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     #plot_data_3D(xyz)     ucs <- best_fit_ucs(xyz)     #with_ucs(ucs, xyz, plot_data_3D)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs))     scr_data <- paste(scr_data, scr_com_ucs()) } write(scr_data, "out.scr")
scr_com_ucs <- function(ucs = NULL) {     ucs_xy <- round(get_ucs_xy(ucs), 5)     if (hasArg(ucs)) {         return(paste("UCS\n3\n",               sep = ""))     } else {         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } }
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     #plot_data_3D(xyz)     ucs <- best_fit_ucs(xyz)     #with_ucs(ucs, xyz, plot_data_3D)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs))     scr_data <- paste(scr_data, scr_com_ucs()) } write(scr_data, "out.scr")
scr_com_ucs <- function(ucs = NULL) {     if (hasArg(ucs)) {         return(paste("UCS\n3\n",               sep = ""))     } else {         ucs_xy <- round(get_ucs_xy(ucs), 5)         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } }
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     #plot_data_3D(xyz)     ucs <- best_fit_ucs(xyz)     #with_ucs(ucs, xyz, plot_data_3D)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs))     scr_data <- paste(scr_data, scr_com_ucs()) } write(scr_data, "out.scr")
library(ggplot2) library(gridExtra) # Functions rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     grid.arrange(plotxy, plotxz, plotyz, ncol = 2) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     x <- xyz$x + 100     y <- xyz$y + 100     f <- function(c) {         d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(x), mean(y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx - 100, y = cy - 100, z = 0, r = r) } with_ucs <- function(ucs, xyz, fun = NULL, ..., convert_back = T) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     if (sum(c("x", "y", "z") %in% names(res)) == 3 & convert_back) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res } get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0, 1, -1),                       y = c(0, 0, 1),                       z = c(0, 0, 0))     xyz <- rotate_points(xyz, ucs$ax, ucs$ay, ucs$az)     xyz$x[1] <- xyz$x[1] + ucs$tx     xyz$y[1] <- xyz$y[1] + ucs$ty     xyz$z[1] <- xyz$z[1] + ucs$tz     xyz } xyz_filt <- function(pts, id_starts_with) {     (pts[startsWith(as.character(pts$id),id_starts_with),c("x","y","z")]) } # SCR Command Functions scr_com_ucs <- function(ucs = NULL) {     if (hasArg(ucs)) {         return(paste("UCS\n3\n",               sep = ""))     } else {         ucs_xy <- round(get_ucs_xy(ucs), 5)         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } } # Import data pts <- read.csv("170524_TP01_Total_Station.txt", sep = "") names(pts) <- c("id", "x", "y", "z") # Calculate useful info plot_data_3D(xyz_filt(pts, "")) scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     #plot_data_3D(xyz)     ucs <- best_fit_ucs(xyz)     #with_ucs(ucs, xyz, plot_data_3D)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs))     scr_data <- paste(scr_data, scr_com_ucs()) } write(scr_data, "out.scr")
scr_data <- ""
xyz <- xyz_filt(pts, "50")
    ucs <- best_fit_ucs(xyz)
    circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)
    scr_data <- paste(scr_data, scr_com_ucs(ucs))
    scr_data <- paste(scr_data, scr_com_ucs())
scr_com_ucs <- function(ucs) {     if (hasArg(ucs)) {         return(paste("UCS\n3\n",               sep = ""))     } else {         ucs_xy <- round(get_ucs_xy(ucs), 5)         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } }
    scr_data <- paste(scr_data, scr_com_ucs())
scr_com_ucs <- function(ucs) {     if (missing(ucs)) {         return(paste("UCS\n3\n",               sep = ""))     } else {         ucs_xy <- round(get_ucs_xy(ucs), 5)         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } }
scr_data <- ""
xyz <- xyz_filt(pts, "50")
    ucs <- best_fit_ucs(xyz)
    circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)
    scr_data <- paste(scr_data, scr_com_ucs(ucs))
    scr_data <- paste(scr_data, scr_com_ucs())
write(scr_data, "out.scr")
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     ucs <- best_fit_ucs(xyz)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs), sep = "")     scr_data <- paste(scr_data, scr_com_ucs(), sep = "") } write(scr_data, "out.scr")
scr_com_ucs <- function(ucs) {     if (missing(ucs)) {         return(paste("UCS\n\n",               sep = ""))     } else {         ucs_xy <- round(get_ucs_xy(ucs), 5)         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } }
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     ucs <- best_fit_ucs(xyz)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs), sep = "")     scr_data <- paste(scr_data, scr_com_ucs(), sep = "") } write(scr_data, "out.scr")
scr_com_circle <- function(circle) {     paste("CIRCLE\n",           paste(circle$x, circle$y, circle$z, sep = ","), "\n",           circle_in_ucs$r, "\n",           sep = "") }
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     ucs <- best_fit_ucs(xyz)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs), sep = "")     scr_data <- paste(scr_data, scr_com_circle(circle_in_ucs), sep = "")     scr_data <- paste(scr_data, scr_com_ucs(), sep = "") } write(scr_data, "out.scr")
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     ucs <- best_fit_ucs(xyz)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs), sep = "")     scr_data <- paste(scr_data, scr_com_circle(circle_in_ucs), sep = "")     scr_data <- paste(scr_data, scr_com_ucs(), sep = "") } write(scr_data, "out.scr")
easy_bf_circle <- function(xyz) {     scr_data <- ""     ucs <- best_fit_ucs(xyz)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs), sep = "")     scr_data <- paste(scr_data, scr_com_circle(circle_in_ucs), sep = "")     scr_data <- paste(scr_data, scr_com_ucs(), sep = "")     scr_data }
scr_data <- "" for (crc in c("50","51", "52", "53", "54")) {     xyz <- xyz_filt(pts, crc)     scr_data <- paste(scr_data, easy_bf_circle(xyz), sep = "")     #ucs <- best_fit_ucs(xyz)     #circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     #scr_data <- paste(scr_data, scr_com_ucs(ucs), sep = "")     #scr_data <- paste(scr_data, scr_com_circle(circle_in_ucs), sep = "")     #scr_data <- paste(scr_data, scr_com_ucs(), sep = "") } write(scr_data, "out.scr")
scr_data <- ""
for (crc in c("50","51", "52", "53", "54")) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") }
scr_data
scr_data <- substring(scr_data, 1, nchar(scr_data) - 1)
scr_data
pts <- read.csv("170524_TP01_Total_Station.txt", sep = "") names(pts) <- c("id", "x", "y", "z") scr_data <- "" # Write script plot_data_3D(xyz_filt(pts, "")) for (crc in c("50","51", "52", "53", "54")) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") } # Write SCR file scr_data <- substring(scr_data, 1, nchar(scr_data) - 1) write(scr_data, "out.scr")
pts <- read.csv("170524_TP01_Total_Station.txt", sep = "") names(pts) <- c("id", "x", "y", "z") plot_data_3D(xyz_filt(pts, "")) scr_data <- "PDMODE\n3\n"
for (crc in c("50","51", "52", "53", "54")) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") }
scr_data <- substring(scr_data, 1, nchar(scr_data) - 1) write(scr_data, "out.scr")
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     lay <- rbind(c(1,2),c(NA,3))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y)) + geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z)) + geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z)) + geom_point()     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y, color = z)) +         geom_point()     plotxz <- ggplot(data = xyz, aes(x = x, y = z, color = y)) +         geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z, color = x)) +         geom_point()     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y, color = z)) +         geom_point() +         theme(axis.ticks.x = element_blank())     plotxz <- ggplot(data = xyz, aes(x = x, y = z, color = y)) +         geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z, color = x)) +         geom_point()     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y, color = z)) +         geom_point() +         theme(axis.title.x = element_blank())     plotxz <- ggplot(data = xyz, aes(x = x, y = z, color = y)) +         geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z, color = x)) +         geom_point()     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y, color = z)) +         geom_point() +         theme(axis.title.x = element_blank(),               axis.ticks.x = element_blank())     plotxz <- ggplot(data = xyz, aes(x = x, y = z, color = y)) +         geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z, color = x)) +         geom_point()     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y, color = z)) +         geom_point() +         theme(axis.title.x = element_blank(),               axis.ticks.x = element_blank(),               axis.text.x = element_blank())     plotxz <- ggplot(data = xyz, aes(x = x, y = z, color = y)) +         geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z, color = x)) +         geom_point()     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y, color = z)) +         geom_point() +         theme(axis.title.x = element_blank(),               axis.ticks.x = element_blank(),               axis.text.x = element_blank(),               legend.position = "none")     plotxz <- ggplot(data = xyz, aes(x = x, y = z, color = y)) +         geom_point()     plotyz <- ggplot(data = xyz, aes(x = y, y = z, color = x)) +         geom_point()     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y, color = z)) +         geom_point() +         theme(legend.position = "none")     plotxz <- ggplot(data = xyz, aes(x = x, y = z, color = y)) +         geom_point() +         theme(axis.title = element_blank(),               axis.ticks = element_blank(),               axis.text = element_blank(),               legend.position = "none")     plotyz <- ggplot(data = xyz, aes(x = y, y = z, color = x)) +         geom_point() +         theme(axis.title.x = element_blank(),               axis.ticks.x = element_blank(),               axis.text.x = element_blank(),               legend.position = "none")     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) }
plot_data_3D(xyz_filt(pts, ""))
pts <- read.csv("170724-TP20.txt", sep = ",")
names(pts) <- c("id", "x", "y", "z")
plot_data_3D(xyz_filt(pts, ""))
library(ggplot2) library(gridExtra) ############################################################################### ###### FUNCTIONS                                                         ###### # Helper Functions rotate_points <- function(xyz, ax, ay, az, reverse=F) {     ax <- ax * pi / 180     ay <- ay * pi / 180     az <- az * pi / 180     Rx <- matrix(c(1, 0, 0, 0, cos(ax), sin(ax), 0, - sin(ax), cos(ax)), nrow = 3, ncol = 3)     Ry <- matrix(c(cos(ay), 0, - sin(ay), 0, 1, 0, sin(ay), 0, cos(ay)), nrow = 3, ncol = 3)     Rz <- matrix(c(cos(az), sin(az), 0, - sin(az), cos(az), 0, 0, 0, 1), nrow = 3, ncol = 3)     xyzr <- xyz     if (! reverse) {         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))     } else {         xyzr <- t(apply(xyzr, 1, function(x) Rz %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Ry %*% as.matrix(x)))         xyzr <- t(apply(xyzr, 1, function(x) Rx %*% as.matrix(x)))     }     xyzr <- data.frame(x = xyzr[, 1], y = xyzr[, 2], z = xyzr[, 3])     xyzr } gen_circle <- function(n, r, ax, ay, az) {     a <- seq(0, 360 - 360 / n, 360 / n) / 180 * pi     x <- r * cos(a)     y <- r * sin(a)     z <- rep(0, n)     circle <- data.frame(x = x, y = y, z = z)     circle <- rotate_points(circle, ax, ay, az)     circle } plot_data_3D <- function(xyz) {     plotxy <- ggplot(data = xyz, aes(x = x, y = y, color = z)) +         geom_point() +         theme(legend.position = "none")     plotxz <- ggplot(data = xyz, aes(x = x, y = z, color = y)) +         geom_point() +         theme(axis.title = element_blank(),               axis.ticks = element_blank(),               axis.text = element_blank(),               legend.position = "none")     plotyz <- ggplot(data = xyz, aes(x = y, y = z, color = x)) +         geom_point() +         theme(axis.title.x = element_blank(),               axis.ticks.x = element_blank(),               axis.text.x = element_blank(),               legend.position = "none")     lay <- rbind(c(3,2),c(NA,1))     grid.arrange(plotxy, plotxz, plotyz, layout_matrix = lay) } best_fit_ucs <- function(xyz) {     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ay <- atan(beta[["x"]]) * 180 / pi     tx <- pca$center[1]     ty <- pca$center[2]     tz <- pca$center[3]     xyz <- rotate_points(xyz, 0, ay, 0)     pca <- prcomp(xyz)     v <- pca$rotation     beta <- -v[-ncol(v), ncol(v)] / v[ncol(v), ncol(v)]     ax <- -atan(beta[["y"]]) * 180 / pi     list(tx = tx, ty = ty, tz = tz, ax = -ax, ay = -ay, az = 0) } best_fit_circle <- function(xyz) {     x <- xyz$x + 100     y <- xyz$y + 100     f <- function(c) {         d <- sqrt((x - c[1]) ** 2 + (y - c[2]) ** 2)         r <- mean(d)         ls <- sum((r - d) ** 2)         ls     }     cxy <- optim(c(mean(x), mean(y)), f)$par     cx <- cxy[1]     cy <- cxy[2]     r <- mean(sqrt((x - cx) ** 2 + (y - cy) ** 2))     data.frame(x = cx - 100, y = cy - 100, z = 0, r = r) } with_ucs <- function(ucs, xyz, fun = NULL, ..., convert_back = T) {     xyz$x <- xyz$x - ucs$tx     xyz$y <- xyz$y - ucs$ty     xyz$z <- xyz$z - ucs$tz     xyz <- rotate_points(xyz, -ucs$ax, -ucs$ay, -ucs$az, T)     res <- fun(xyz, ...)     if (sum(c("x", "y", "z") %in% names(res)) == 3 & convert_back) {         resxyz <- data.frame(x = res$x, y = res$y, z = res$z)         resxyz <- rotate_points(resxyz, ucs$ax, ucs$ay, ucs$az)         resxyz$x <- resxyz$x + ucs$tx         resxyz$y <- resxyz$y + ucs$ty         resxyz$z <- resxyz$z + ucs$tz         res$x <- resxyz$x         res$y <- resxyz$y         res$z <- resxyz$z     }     res } get_ucs_xy <- function(ucs) {     xyz <- data.frame(x = c(0, 1, -1),                       y = c(0, 0, 1),                       z = c(0, 0, 0))     xyz <- rotate_points(xyz, ucs$ax, ucs$ay, ucs$az)     xyz$x[1] <- xyz$x[1] + ucs$tx     xyz$y[1] <- xyz$y[1] + ucs$ty     xyz$z[1] <- xyz$z[1] + ucs$tz     xyz } xyz_filt <- function(pts, id_starts_with) {     (pts[startsWith(as.character(pts$id),id_starts_with),c("x","y","z")]) } # SCR Command Functions scr_com_ucs <- function(ucs) {     if (missing(ucs)) {         return(paste("UCS\n\n",               sep = ""))     } else {         ucs_xy <- round(get_ucs_xy(ucs), 5)         return(paste("UCS\n3\n",               paste(ucs_xy$x[1], ucs_xy$y[1], ucs_xy$z[1], sep = ","), "\n",               "@", paste(ucs_xy$x[2], ucs_xy$y[2], ucs_xy$z[2], sep = ","), "\n",               "@", paste(ucs_xy$x[3], ucs_xy$y[3], ucs_xy$z[3], sep = ","), "\n",               sep = ""))     } } scr_com_circle <- function(circle) {     paste("CIRCLE\n",           paste(circle$x, circle$y, circle$z, sep = ","), "\n",           circle_in_ucs$r, "\n",           sep = "") } # Easy script blocks easy_bf_circle <- function(xyz) {     scr_data <- ""     ucs <- best_fit_ucs(xyz)     circle_in_ucs <- round(with_ucs(ucs, xyz, best_fit_circle, convert_back = F), 5)     scr_data <- paste(scr_data, scr_com_ucs(ucs), sep = "")     scr_data <- paste(scr_data, scr_com_circle(circle_in_ucs), sep = "")     scr_data <- paste(scr_data, scr_com_ucs(), sep = "")     scr_data } ############################################################################### ###### STARTER CODE                                                      ###### pts <- read.csv("170724-TP20.txt", sep = ",") names(pts) <- c("id", "x", "y", "z") plot_data_3D(xyz_filt(pts, ""))
scr_data <- "PDMODE\n3\n"
circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90")
for (crc in c("50","51", "52", "53", "54")) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") }
scr_data <- "PDMODE\n3\n"
circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90") for (crc in circle_ids) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") }
circle_ids <- c("10")
for (crc in circle_ids) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") }
scr_com_circle <- function(circle) {     paste("CIRCLE\n",           paste(circle$x, circle$y, circle$z, sep = ","), "\n",           circle$r, "\n",           sep = "") }
circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90") circle_ids <- c("10") for (crc in circle_ids) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") }
scr_data <- substring(scr_data, 1, nchar(scr_data) - 1) write(scr_data, "out.scr")
circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90")
for (crc in circle_ids) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") }
scr_data <- substring(scr_data, 1, nchar(scr_data) - 1) write(scr_data, "out.scr")
scr_data <- "PDMODE\n3\n"
circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90") for (crc in circle_ids) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") } ############################################################################### ###### ENDER CODE                                                        ###### scr_data <- substring(scr_data, 1, nchar(scr_data) - 1) write(scr_data, "out.scr")
with_ucs(best_fit_ucs(xyz_filt(pts, "10")), xyz_filt(pts, "10"), plot_data_3D)
with_ucs(best_fit_ucs(xyz_filt(pts, "20")), xyz_filt(pts, "20"), plot_data_3D)
library(ggplot2)
library(gridExtra)
source("func.R")
source("func_acadcom.R")
source("func_easy.R")
pts <- read.csv("170724-TP20.txt", sep = ",")
names(pts) <- c("id", "x", "y", "z")
plot_data_3D(xyz_filt(pts, ""))
scr_data <- "PDMODE\n3\n"
with_ucs(best_fit_ucs(xyz_filt(pts, "20")), xyz_filt(pts, "20"), plot_data_3D)
circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90")
for (crc in circle_ids) {     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") }
###############################################################################
###### ENDER CODE                                                        ######
scr_data <- substring(scr_data, 1, nchar(scr_data) - 1)
write(scr_data, "out.scr")
pts <- read.csv("170724-TP20.txt", sep = ",") names(pts) <- c("id", "x", "y", "z") plot_data_3D(xyz_filt(pts, "")) # Initial script commands scr_data <- "PDMODE\n3\n" ############################################################################### ###### BLOCKS                                                            ###### # SIF ROERMOND - 01 circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90") for (crc in circle_ids) {     with_ucs(best_fit_ucs(xyz_filt(pts, crc)), xyz_filt(pts, "20"), plot_data_3D)     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") } ############################################################################### ###### ENDER CODE                                                        ###### scr_data <- substring(scr_data, 1, nchar(scr_data) - 1) write(scr_data, "out.scr")
pts <- read.csv("170724-TP20.txt", sep = ",") names(pts) <- c("id", "x", "y", "z") plot_data_3D(xyz_filt(pts, "")) # Initial script commands scr_data <- "PDMODE\n3\n"
circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90") for (crc in circle_ids) {     with_ucs(best_fit_ucs(xyz_filt(pts, crc)), xyz_filt(pts, crc), plot_data_3D)     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") } ############################################################################### ###### ENDER CODE                                                        ###### scr_data <- substring(scr_data, 1, nchar(scr_data) - 1) write(scr_data, "out.scr")
############################################################################### #                                                                  STARTER CODE # Config vars fn <- "170724-TP20.txt" # Libraries library(ggplot2) library(gridExtra) # Sources source("func.R") source("func_acadcom.R") source("func_easy.R") # PTS loading pts <- read.csv(fn, sep = ",") names(pts) <- c("id", "x", "y", "z") # Plot entire PTS plot_data_3D(xyz_filt(pts, "")) # Initial script commands scr_data <- scr_init() ############################################################################### #                                                                        BLOCKS # SIF ROERMOND - 01 - Overall straightness & total length circle_ids <- c("10", "20", "30", "40", "50", "60", "70", "80", "90") for (crc in circle_ids) {     with_ucs(best_fit_ucs(xyz_filt(pts, crc)), xyz_filt(pts, crc), plot_data_3D)     scr_data <- paste(scr_data, easy_bf_circle(xyz_filt(pts, crc)), sep = "") } ############################################################################### #                                                                    ENDER CODE scr_export(scr_data)
